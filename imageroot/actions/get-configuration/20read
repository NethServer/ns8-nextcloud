#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

#
# Read configuration
#

import os
import sys
import json
import agent
import socket
import subprocess

# Prepare return variable
config = {}

# Read current configuration from the environment file
config["domain"] = os.getenv("NEXTCLOUD_DOMAIN")
config["host"] = os.getenv("TRAEFIK_HOST")
config["lets_encrypt"] = os.getenv("TRAEFIK_LETS_ENCRYPT") == "True"
config["collabora_host"] = os.getenv("COLLABORA_HOST", "")
config["tls_verify_collabora"] = os.getenv("TLS_VERIFY_COLLABORA") ==  "True"

try:
    config['default_domain'] = socket.getfqdn().partition('.')[2]
except:
    config['default_domain'] = 'nethserver.test'

# Check if Nextcloud is already installed
try:
    cmd = ['podman', 'exec', '--user', 'www-data', 'nextcloud-app', 'php', './occ', 'status', '--output', 'json']
    p = subprocess.run(cmd, capture_output=True)
    status = json.loads(p.stdout)
    config["installed"] = status["installed"]
except:
    config["installed"] = False

try:
    p = subprocess.run(['systemctl', '--user', 'is-active', '-q', 'nextcloud'])
    config['running'] = (p.returncode == 0)
except:
    config['running'] = False

# verify if collabora is installed on the cluster
# propose in UI to link this nextcloud to collabora
rdb = agent.redis_connect(privileged=False)
config["is_collabora"] = True if rdb.get('cluster/default_instance/collabora') else False
# retrieve all url stored in redis for all collabora instances
array_collabora = []
for c in [c.replace('roles/module/', '') for c in  rdb.keys('roles/module/collabora*')]:
    url = rdb.hget('module/'+c+'/environment', 'TRAEFIK_HOST')
    if url:
        array_collabora.append({"name": c, "label": c+' ('+ url+')', "value": url})
config["array_collabora"] = array_collabora

# Dump the configuratio to stdou
json.dump(config, fp=sys.stdout)
