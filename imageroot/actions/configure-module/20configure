#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

# This step will configure official Nextcloud image: https://github.com/docker-library/docs/blob/master/nextcloud/README.md

import json
import sys
import socket
import agent

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

# Setup default values
host = data.get("host")

# Talk with agent using file descriptor.
# Setup configuration from user input.
agent.set_env("NEXTCLOUD_TRUSTED_DOMAINS", host)
agent.set_env("NEXTCLOUD_DOMAIN", data.get("domain", ""))

# Setup environment for nextcloud app: DB, Redis and PHP
agent.set_env("PHP_ENABLE_OPCACHE", "1")
agent.set_env("PHP_MEMORY_LIMIT", "1024M")
agent.set_env("MYSQL_DATABASE", "nextcloud")
agent.set_env("MYSQL_HOST", "127.0.0.1")
agent.set_env("MYSQL_USER", "nextcloud")
agent.set_env("MYSQL_PASSWORD", "nextcloud")
agent.set_env("REDIS_HOST", "127.0.0.1")
agent.set_env("REDIS_HOST_PORT", "6379")
agent.set_env("MYSQL_ROOT_PASSWORD", "nextcloud")
agent.set_env("OVERWRITEPROTOCOL", "https")
agent.set_env("OVERWRITEHOST", data.get(host, ""))
agent.set_env("COLLABORA_HOST", data.get("collabora_host", ""))
agent.set_env("TLS_VERIFY_COLLABORA", data.get("tls_verify_collabora", True))

# Make sure everything is saved inside the environment file
# just before starting systemd unit
agent.dump_env()

# Save configuration to JSON for later user and backup
with open('config.json', 'w') as config:
    config.write(json.dumps(data))
